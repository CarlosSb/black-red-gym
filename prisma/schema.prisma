// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Plan {
  id              String   @id @default(cuid())
  name            String
  price           Float
  description     String
  features        String[] // Array of strings for features
  activeMembers   Int      @default(0)
  monthlyRevenue  Float    @default(0)
  status          PlanStatus @default(ACTIVE)
  popular         Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("plans")
}

model Message {
  id          String        @id @default(cuid())
  name        String
  email       String
  phone       String
  subject     String
  message     String
  date        DateTime      @default(now())
  status      MessageStatus @default(UNREAD)
  priority    Priority      @default(MEDIUM)
  response    String?
  respondedAt DateTime?

  @@map("messages")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String
  password  String     // Hashed password
  role      UserRole   @default(USER)
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("users")
}

model AcademySettings {
  id          String   @id @default(cuid())
  name        String
  description String
  phone       String
  email       String
  address     String
  whatsapp    String?  // WhatsApp number for contact
  hours       Json     // Store hours as JSON
  colors      Json     // Store colors as JSON
  notifications Json   // Store notifications as JSON
  logo        String?  // Logo image path
  about       String?  // About section content
  heroTitle   String?  // Hero section title
  heroSubtitle String? // Hero section subtitle
  heroImage   String?  // Hero section image
  features    Json?    // Store features as JSON
  metrics     Json?    // Store academy metrics as JSON
  assistantEnabled Boolean @default(true) // Enable/disable AI assistant
  assistantDelay Int @default(5000) // Delay in ms before showing assistant
  assistantWelcomeMessage String? // Custom welcome message
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("academy_settings")
}

enum PlanStatus {
  ACTIVE
  INACTIVE
}

enum MessageStatus {
  READ
  UNREAD
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  BANNED
  PENDING
}

model CheckinCode {
  id        String   @id @default(cuid())
  code      String   @unique
  validDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  checkIns CheckIn[]

  @@map("checkin_codes")
}

model CheckIn {
  id          String   @id @default(cuid())
  name        String
  phone       String
  checkInTime DateTime @default(now())
  status      CheckInStatus @default(ACTIVE)
  codeId      String?
  code        CheckinCode? @relation(fields: [codeId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("check_ins")
}

enum CheckInStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

model Appointment {
  id          String   @id @default(cuid())
  name        String
  phone       String
  email       String
  classType   String   // Tipo de aula (Musculação, Crossfit, etc.)
  scheduledDate DateTime
  scheduledTime String  // Horário formatado (HH:MM)
  status      AppointmentStatus @default(PENDING)
  notes       String?  // Observações adicionais
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("appointments")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

model Referral {
  id          String   @id @default(cuid())
  referrerName String  // Nome do aluno que indica
  referrerPhone String // Telefone do aluno que indica
  referredName String  // Nome do indicado
  referredPhone String // Telefone do indicado
  referredEmail String? // E-mail do indicado (opcional)
  status      ReferralStatus @default(PENDING)
  notes       String?  // Observações
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("referrals")
}

enum ReferralStatus {
  PENDING
  CONTACTED
  CONVERTED
  CANCELLED
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  content   String
  rating    Int      @default(5) // 1-5 stars
  image     String?  // Avatar image URL or initials
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("testimonials")
}

model KnowledgeBase {
  id        String   @id @default(cuid())
  question  String
  answer    String   @db.Text
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("knowledge_bases")
}

model Promotion {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  image       String?  // Image URL or path
  validUntil  DateTime // Expiration date
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("promotions")
}

model Partner {
   id            String   @id @default(cuid())
   name          String
   description   String   @db.Text
   logo          String?  // Logo URL or path
   link          String?  // Website or contact link
   category      String   // e.g., "Nutricionista", "Fisioterapeuta", "Personal"
   isActive      Boolean  @default(true)
   featured      Boolean  @default(false) // Parceiro destacado
   priority      Int      @default(0)     // Prioridade (0-10, maior = mais prioridade)
   displayOrder  Int      @default(0)     // Ordem de exibição
   createdAt     DateTime @default(now())
   updatedAt     DateTime @updatedAt

   @@map("partners")
}

model Ad {
   id            String   @id @default(cuid())
   title         String
   image         String?  // Banner image URL or path
   link          String?  // Target URL
   validUntil    DateTime // Expiration date
   isActive      Boolean  @default(true)
   featured      Boolean  @default(false) // Anúncio destacado
   priority      Int      @default(0)     // Prioridade (0-10, maior = mais prioridade)
   displayOrder  Int      @default(0)     // Ordem de exibição
   createdAt     DateTime @default(now())
   updatedAt     DateTime @updatedAt

   @@map("ads")
}
